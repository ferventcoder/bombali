<?xml version="1.0" encoding="utf-8" ?>
<project name="EnvironmentFileBuilder" default="go">
  <!-- Project UppercuT - http://uppercut.googlecode.com -->
  <!-- DO NOT EDIT THIS FILE - This follows a convention to find configurations, apply environment specifics and save them - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="dirs.current" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <property name="dirs.build" value="${dirs.current}\..\build_output" />
  <property name="dirs.build.environmentfiles" value="${dirs.build}\EnvironmentFiles" overwrite="false" />
  <property name="dirs.environments.settings" value="${dirs.current}\..\Settings" overwrite="false" />
  <property name="dirs.environments.templates" value="${dirs.build}" overwrite="false" />

  <target name="go" depends="build_environments" description="Build Environment Files" if="${directory::exists(dirs.environments.settings)}" />

  <target name="build_environments">
    <call target="build_environment_files" />
  
    <foreach item="Folder" in="${dirs.environments.templates}" property="templates.folder">
        <property name ="dirs.environments.templates" value="${templates.folder}" />
        <call target="build_environment_files" />
    </foreach>
  </target>

  <!-- 
      SETTINGS FILE FYI
      If a property in any of the template files is not defined in the first settings file, the build will fail
      If a property is defined in the first settings file and not the second, the build will succeed. It will use the value provided in the first settings file.
      This could be bad, just make sure you define all properties in all settings files.
    -->

  <target name="build_environment_files" if="${directory::exists(dirs.environments.settings)}">
    <echo message="Looking for template files in ${dirs.environments.templates}." />
    <foreach item="File" in="${dirs.environments.settings}" property="settings.filename" if="${directory::exists(dirs.environments.settings)}">
      <if test="${string::ends-with(settings.filename, '.settings')}">
        <echo message="I found environment ${path::get-file-name-without-extension(settings.filename)} with settings file ${path::get-file-name(settings.filename)}"/>
        
        <include buildfile="${settings.filename}" />
        <property name="settings.environment" value="${path::get-file-name-without-extension(settings.filename)}"/>
        
        <foreach item="File" in="${dirs.environments.templates}" property="templates.filename" if="${directory::exists(dirs.environments.templates)}">
          <if test="${string::ends-with(templates.filename, '.template')}">
            <echo message="Taking template file ${path::get-file-name(templates.filename)} and creating destination file ${settings.environment}.${path::get-file-name-without-extension(templates.filename)}"/>
            <copy
                file="${templates.filename}"
                tofile="${dirs.build.environmentfiles}\${settings.environment}.${path::get-file-name-without-extension(templates.filename)}"
                overwrite="true"
                >
              <filterchain>
                <expandproperties />
              </filterchain>
            </copy>
          </if>
        </foreach>
      </if>
    </foreach>
  </target>

</project>