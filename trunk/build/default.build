<?xml version="1.0" encoding="utf-8" ?>
<project name="UppercuTBuild" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - Add custom tasks in BuildTasks.Custom folder with file by the same name - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="repository.path" value="__REPOSITORY_PATH__" overwrite="false" />
  <property name="source_control_type" value="svn" overwrite="false" />
  <property name="dirs.current" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <property name="version.uppercut" value="0" />
  <property name="version.revision" value="0" />
  <property name="version.build" value="0" />
  <property name="dirs.build" value="${dirs.current}\..\build_output" />
  <property name="dirs.drop" value="${dirs.current}\..\code_drop" overwrite="false" />
  <property name="file.custom.step.before" value="${dirs.current}\..\build.custom\default.pre.build" />
  <property name="file.custom.step.after" value="${dirs.current}\..\build.custom\default.post.build" />
  <property name="file.custom.step.replace" value="${dirs.current}\..\build.custom\default.replace.build" />

  <target name="go" depends="report_uppercut_version, run_tasks, report_finish_time" />

  <target name="run_tasks">
    <echo message="Running ${project::get-name()} tasks." />
    <call target="prepare" if="${target::exists('prepare')}" />
    <call target="custom_tasks_before" if="${target::exists('custom_tasks_before')}"  />
    <call target="run_normal_tasks" if="${not file::exists(file.custom.step.replace)}" />
    <echo message="Running custom tasks instead of normal tasks if ${file.custom.step.replace} exists." />
    <nant buildfile="${file.custom.step.replace}" inheritall="true" if="${file::exists(file.custom.step.replace)}" />
    <call target="custom_tasks_after" if="${target::exists('custom_tasks_after')}" />
  </target>

  <target name="run_normal_tasks"
          depends="error_check, build"
          description="Building with UppercuT default.build." />

  <target name="custom_tasks_before">
    <echo message="Running custom tasks if ${file.custom.step.before} exists." />
    <nant buildfile="${file.custom.step.before}" inheritall="true" if="${file::exists(file.custom.step.before)}" failonerror="false" />
  </target>

   <target name="prepare">
    <echo message="Removing and adding ${dirs.build}."/>
    <delete dir="${dirs.build}" failonerror="false" />
    <mkdir dir="${dirs.build}" failonerror="false" />
  </target>
  
  <target name="error_check">
    <fail message="You must provide arguments in your command line call like this: default.build -D:project.name='SOLUTION_NAME_WITHOUT_EXTENSION' -D:repository.path='FULL_PATH_TO_REPOSITORY' or pass the build configuration settings file default.build -D:build.config.settings='settings\Uppercut.config"
      if="${repository.path=='__REPOSITORY_PATH__'}" />
  </target>

  <target name="build">
    <call target="get_revision" />
    <call target="get_build_number" />
    <call target="get_drop_directory" />

    <nant buildfile="${dirs.current}\policyChecks.step" inheritall="true" />
    <nant buildfile="${dirs.current}\versionBuilder.step" inheritall="true" />
    <nant buildfile="${dirs.current}\compile.step" inheritall="true" />
    <nant buildfile="${dirs.current}\environmentBuilder.step" inheritall="true" />
    <nant buildfile="${dirs.current}\analyze.step" inheritall="true" />
    <nant buildfile="${dirs.current}\generateBuildInfo.step" inheritall="true" />
    <nant buildfile="${dirs.current}\package.step" inheritall="true" />
  </target>

  <target name="get_build_number">
    <property name="version.build" value="${environment::get-variable('CCNetNumericLabel')}" if="${environment::variable-exists('CCNetNumericLabel')}" />
    <property name="version.build" value="${environment::get-variable('BUILD_NUMBER')}" if="${environment::variable-exists('BUILD_NUMBER')}" />
    <echo message="Using build number ${version.build}." />
  </target>

  <target name="get_drop_directory">
    <property name="dirs.drop" value="${environment::get-variable('CCNetArtifactDirectory')}\b${version.build}-r${version.revision}" if="${environment::variable-exists('CCNetArtifactDirectory')}" />
    <!--Point TeamCity at code_drop for an artifact directory. It will automatically save the files. -->
    <echo message="Compiled code drop directory will be ${path::get-full-path(dirs.drop)}." />
  </target>

  <target name="custom_tasks_after">
    <echo message="Running custom tasks if ${file.custom.step.after} exists." />
    <nant buildfile="${file.custom.step.after}" inheritall="true" if="${file::exists(file.custom.step.after)}" failonerror="false" />
  </target>

  <target name="report_finish_time">
    <echo message="Build finished at ${datetime::now()} with UppercuT version ${version.uppercut}." />
  </target>

  <target name="get_revision">
    <call target="svn_get_revision" if="${source_control_type=='svn'}" />
    <call target="git_get_revision" if="${source_control_type=='git'}" />
    <call target="vss_get_revision" if="${source_control_type=='vss'}" />
    <call target="tfs_get_revision" if="${source_control_type=='tfs'}" />
    <call target="vault_get_revision" if="${source_control_type=='vault'}" />
    <echo message="Using revision number: ${version.revision}." />
  </target>

  <target name="svn_get_revision" description="Gets the current revision number">
    <echo message="Getting revision number for ${repository.path}."/>
    <!-- try to update the revision -->
    <exec
      program="svn"
      commandline="info --xml"
      output="_revision.xml"
      failonerror="false"/>
    <xmlpeek
      file="_revision.xml"
      xpath="/info/entry/@revision"
      property="version.revision"
      failonerror="false"/>
    <delete file="_revision.xml" failonerror="false" />
  </target>

  <target name="git_get_revision" description="Gets the current revision number"></target>
  <target name="vss_get_revision" description="Gets the current revision number"></target>
  <target name="tfs_get_revision" description="Gets the current revision number"></target>
  <target name="vault_get_revision" description="Gets the current revision number"></target>

  <target name="report_uppercut_version">
    <xmlpeek
      file="UppercuT.xml"
      xpath="/uppercut/version"
      property="version.uppercut"
      failonerror="false" />
    <echo message="Using UppercuT version: ${version.uppercut}." />
  </target>

</project>