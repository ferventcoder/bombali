<?xml version="1.0" encoding="utf-8" ?>
<project name="DeploymentBuilder" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - This follows a convention to find configurations, apply environment specifics and save them - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="dirs.current" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <property name="dirs.build" value="${dirs.current}\..\build_output" />
  <property name="dirs.drop" value="${dirs.current}\..\code_drop" overwrite="false" />
  <property name="dirs.deployment" value="${dirs.drop}\deployment" overwrite="false" />
  <property name="dirs.deployment.settings" value="${dirs.deployment}\..\settings" overwrite="false" />
  <property name="dirs.deployment.templates" value="${dirs.deployment}\templates" overwrite="false" />
  <property name="file.custom.step.before" value="${dirs.current}\..\build.custom\deploymentBuilder.pre.step" />
  <property name="file.custom.step.after" value="${dirs.current}\..\build.custom\deploymentBuilder.post.step" />
  <property name="file.custom.step.replace" value="${dirs.current}\..\build.custom\deploymentBuilder.replace.step" />

  <target name="go" depends="run_tasks" />

  <target name="run_tasks">
    <echo message="Running ${project::get-name()} tasks." />
    <call target="prepare" if="${target::exists('prepare')}" />
    <call target="custom_tasks_before" if="${target::exists('custom_tasks_before')}"  />
    <call target="run_normal_tasks" if="${not file::exists(file.custom.step.replace)}" />
    <echo message="Running custom tasks instead of normal tasks if ${file.custom.step.replace} exists." />
    <nant buildfile="${file.custom.step.replace}" inheritall="true" if="${file::exists(file.custom.step.replace)}" />
    <call target="custom_tasks_after" if="${target::exists('custom_tasks_after')}" />
  </target>

  <target name="run_normal_tasks"
          depends="build_deployments"
          description="Deployment File Builder"
          if="${directory::exists(dirs.deployment.templates)}" />

  <target name="custom_tasks_before">
    <echo message="Running custom tasks if ${file.custom.step.before} exists." />
    <nant buildfile="${file.custom.step.before}" inheritall="true" if="${file::exists(file.custom.step.before)}" failonerror="false" />
  </target>

  <target name="build_deployments" if="${directory::exists(dirs.deployment.templates)}" >
    <foreach item="File" in="${dirs.deployment.settings}" property="settings.filename" if="${directory::exists(dirs.deployment.settings)}">
      <if test="${string::ends-with(settings.filename, '.settings')}">
        <echo message="I found environment ${path::get-file-name-without-extension(settings.filename)} with settings file ${path::get-file-name(settings.filename)}"/>

        <include buildfile="${settings.filename}" failonerror="false"  />
        <property name="settings.environment" value="${path::get-file-name-without-extension(settings.filename)}"/>

        <!-- 
          SETTINGS FILE FYI
          If a property in any of the template files is not defined in the first settings file, the build will fail
          If a property is defined in the first settings file and not the second, the build will succeed. It will use the value provided in the first settings file.
          This could be bad, just make sure you define all properties in all settings files.
        -->
        <foreach item="File" in="${dirs.deployment.templates}" property="templates.filename" if="${directory::exists(dirs.deployment.templates)}">
          <echo message="Taking template file ${path::get-file-name(templates.filename)} and creating destination file ${settings.environment}.${path::get-file-name(templates.filename)}"/>

          <copy
              file="${templates.filename}"
              tofile="${dirs.deployment}\${settings.environment}.${path::get-file-name(templates.filename)}"
              overwrite="true"
              >
            <filterchain>
              <expandproperties />
            </filterchain>
          </copy>
        </foreach>
      </if>
    </foreach>
  </target>

  <target name="custom_tasks_after">
    <echo message="Running custom tasks if ${file.custom.step.after} exists." />
    <nant buildfile="${file.custom.step.after}" inheritall="true" if="${file::exists(file.custom.step.after)}" failonerror="false" />
  </target>

</project>