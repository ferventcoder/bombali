<?xml version="1.0" encoding="utf-8" ?>
<project name="TestRunner" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - This follows a convention for testing with Integration tests being separated from Unit tests - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="file.current.no_extension" value="test" />
  <property name="dirs.current" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <property name="path.to.toplevel" value="..\.." />
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}\${path.to.toplevel}\${folder.build_scripts_custom}\analyzers" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}\${path.to.toplevel}\${folder.code_build}" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />
  <property name="dirs.build.code" value="${dirs.build}\${folder.app.drop}" overwrite="false" />
  <property name="test.framework" value="mbunit" overwrite="false" />
  <property name="file.custom.step.before" value="${dirs.build_scripts_custom}\${file.current.no_extension}.pre.step" />
  <property name="file.custom.step.after" value="${dirs.build_scripts_custom}\${file.current.no_extension}.post.step" />
  <property name="file.custom.step.replace" value="${dirs.build_scripts_custom}\${file.current.no_extension}.replace.step" />

  <target name="go" depends="run_tasks" />

  <target name="run_tasks">
    <echo message="Running ${project::get-name()} tasks." />
    <call target="prepare" if="${target::exists('prepare')}" />
    <call target="custom_tasks_before" if="${target::exists('custom_tasks_before')}"  />
    <call target="run_normal_tasks" if="${not file::exists(file.custom.step.replace)}" />
    <echo message="Running custom tasks instead of normal tasks if ${file.custom.step.replace} exists." />
    <nant buildfile="${file.custom.step.replace}" inheritall="true" if="${file::exists(file.custom.step.replace)}" />
    <call target="custom_tasks_after" if="${target::exists('custom_tasks_after')}" />
  </target>

  <target name="run_normal_tasks"
          depends="run_tests"
          description="Testing project for quality." />

  <target name="custom_tasks_before">
    <echo message="Running custom tasks if ${file.custom.step.before} exists." />
    <nant buildfile="${file.custom.step.before}" inheritall="true" if="${file::exists(file.custom.step.before)}" failonerror="false" />
  </target>

  <target name="run_tests">
    <nant buildfile="${dirs.current}\mbunit2.test.step" inheritall="true" if="${test.framework=='mbunit2'}" />
    <nant buildfile="${dirs.current}\gallio.test.step" inheritall="true" if="${test.framework=='gallio'}" />
    <nant buildfile="${dirs.current}\nunit.test.step" inheritall="true" if="${test.framework=='nunit'}" />
    <call target="set_normal_failure_mode" />
  </target>

  <target name="all">
    <nant buildfile="${dirs.current}\mbunit2.test.step" target="run_all_tests" inheritall="true" if="${test.framework=='mbunit2'}" />
    <nant buildfile="${dirs.current}\gallio.test.step" target="run_all_tests" inheritall="true" if="${test.framework=='gallio'}" />
    <nant buildfile="${dirs.current}\nunit.test.step" target="run_all_tests" inheritall="true" if="${test.framework=='nunit'}" />
    <call target="set_normal_failure_mode" />
  </target>

  <target name="open_results">
    <nant buildfile="${dirs.current}\mbunit2.test.step" target="open_results" inheritall="true" if="${test.framework=='mbunit2'}" />
    <nant buildfile="${dirs.current}\gallio.test.step" target="open_results" inheritall="true" if="${test.framework=='gallio'}" />
    <nant buildfile="${dirs.current}\nunit.test.step" target="open_results" inheritall="true" if="${test.framework=='nunit'}" />
  </target>

  <target name="set_normal_failure_mode">
    <property name="nant.onfailure" value="fail" />
  </target>

  <target name="custom_tasks_after">
    <echo message="Running custom tasks if ${file.custom.step.after} exists." />
    <nant buildfile="${file.custom.step.after}" inheritall="true" if="${file::exists(file.custom.step.after)}" failonerror="false" />
  </target>

</project>