<?xml version="1.0" encoding="utf-8" ?>
<project name="NUnitTester" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - This follows a convention for testing with Integration tests being separated from Unit tests - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="dirs.build" value="${directory::get-parent-directory(project::get-buildfile-path())}\..\..\build_output" />
  <property name="dirs.build_artifacts" value="${dirs.build}\build_artifacts" overwrite="false" />
  <property name="dirs.test_results" value="${dirs.build_artifacts}\nunit" overwrite="false" />
  <property name="file.test_results" value="index" overwrite="false" />
  <property name="file.custom.step.before" value="${dirs.current}\..\..\build.custom\analyzers\nunit.test.pre.step" />
  <property name="file.custom.step.after" value="${dirs.current}\..\..\build.custom\analyzeers\nunit.test.post.step" />
  <property name="file.custom.step.replace" value="${dirs.current}\..\..\build.custom\analyzers\nunit.test.replace.step" />

  <target name="go" depends="run_tasks" />

  <target name="run_tasks">
    <echo message="Running ${project::get-name()} tasks." />
    <call target="prepare" if="${target::exists('prepare')}" />
    <call target="custom_tasks_before" if="${target::exists('custom_tasks_before')}"  />
    <call target="run_normal_tasks" if="${not file::exists(file.custom.step.replace)}" />
    <echo message="Running custom tasks instead of normal tasks if ${file.custom.step.replace} exists." />
    <nant buildfile="${file.custom.step.replace}" inheritall="true" if="${file::exists(file.custom.step.replace)}" />
    <call target="custom_tasks_after" if="${target::exists('custom_tasks_after')}" />
  </target>

  <target name="run_normal_tasks"
          depends="set_nunit_failure_mode, run_tests, generate_report"
          description="Testing with NUnit." />

  <target name="custom_tasks_before">
    <echo message="Running custom tasks if ${file.custom.step.before} exists." />
    <nant buildfile="${file.custom.step.before}" inheritall="true" if="${file::exists(file.custom.step.before)}" failonerror="false" />
  </target>

  <target name="prepare">
    <echo message="Removing and adding ${dirs.test_results}."/>
    <delete dir="${dirs.test_results}" failonerror="false" />
    <mkdir dir="${dirs.test_results}" />
  </target>

  <target name="set_nunit_failure_mode">
    <property name="nant.onfailure" value="generate_report" />
  </target>

  <target name="run_tests" depends="prepare" description="Running Unit Tests">
    <echo message="Running tests using NUnit and putting results in ${dirs.test_results}."/>
    <nunit2
        haltonfailure="false"
        failonerror="true"
        >
      <formatter type="Xml" usefile="true" extension=".xml" outputdir="${dirs.test_results}" />
      <formatter type="Plain" usefile="true" extension=".txt" outputdir="${dirs.test_results}" />
      <test>
        <assemblies>
          <exclude name="${dirs.build}\*Database*dll" />
          <exclude name="${dirs.build}\*.Integration*dll" />
          <exclude name="${dirs.build}\TestFu.dll" />
          <include name="${dirs.build}\*Test*dll" />
          <include name="${dirs.build}\*.Specs*dll" />
        </assemblies>
        <categories>
          <exclude name="NotWorking" />
          <exclude name="Database" />
          <exclude name="Integration" />
          <exclude name="Slow" />
        </categories>
      </test>
    </nunit2>
  </target>

  <target name="run_all_tests" depends="prepare, set_nunit_failure_mode, run_all_nunit_tests, generate_report" description="Like go but runs all tests" />

  <target name="run_all_nunit_tests" depends="prepare, set_nunit_failure_mode" description="Running All Unit Tests">
    <echo message="Running all tests (including integration tests) using NUnit and putting results in ${dirs.test_results}."/>
    <nunit2
        haltonfailure="false"
        failonerror="true"
        >
      <formatter type="Xml" usefile="true" extension=".xml" outputdir="${dirs.test_results}" />
      <formatter type="Plain" usefile="true" extension=".txt" outputdir="${dirs.test_results}" />
      <test>
        <assemblies>
          <exclude name="${dirs.build}\TestFu.dll" />
          <include name="${dirs.build}\*Test*dll" />
          <include name="${dirs.build}\*.Specs*dll" />
        </assemblies>
      </test>
    </nunit2>
  </target>

  <target name="generate_report">
    <nunit2report todir="${dirs.test_results}" failonerror="false" >
      <fileset>
        <include name="${dirs.test_results}\*-results.xml"/>
      </fileset>
    </nunit2report>
  </target>

  <target name="open_results">
    <echo message="Opening results at ${path::get-full-path(dirs.test_results)}\${file.test_results}.html."/>
    <exec
      spawn="true"
      program="${environment::get-folder-path('ProgramFiles')}\Internet Explorer\iexplore.exe"
      commandline="${path::get-full-path(dirs.test_results)}\${file.test_results}.html"
      >
    </exec>
  </target>

  <target name="custom_tasks_after">
    <echo message="Running custom tasks if ${file.custom.step.after} exists." />
    <nant buildfile="${file.custom.step.after}" inheritall="true" if="${file::exists(file.custom.step.after)}" failonerror="false" />
  </target>

</project>